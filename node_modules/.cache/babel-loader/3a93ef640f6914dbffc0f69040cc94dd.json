{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/akshaybhopani/GitHub/DCIPL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/akshaybhopani/GitHub/DCIPL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/Users/akshaybhopani/GitHub/DCIPL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/akshaybhopani/GitHub/DCIPL/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar crypto = require('crypto');\n\nvar PaytmChecksum = /*#__PURE__*/function () {\n  function PaytmChecksum() {\n    _classCallCheck(this, PaytmChecksum);\n  }\n\n  _createClass(PaytmChecksum, null, [{\n    key: \"encrypt\",\n    value: function encrypt(input, key) {\n      var cipher = crypto.createCipheriv('AES-128-CBC', key, PaytmChecksum.iv);\n      var encrypted = cipher.update(input, 'binary', 'base64');\n      encrypted += cipher.final('base64');\n      return encrypted;\n    }\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(encrypted, key) {\n      var decipher = crypto.createDecipheriv('AES-128-CBC', key, PaytmChecksum.iv);\n      var decrypted = decipher.update(encrypted, 'base64', 'binary');\n\n      try {\n        decrypted += decipher.final('binary');\n      } catch (e) {\n        console.log(e);\n      }\n\n      return decrypted;\n    }\n  }, {\n    key: \"generateSignature\",\n    value: function generateSignature(params, key) {\n      if (typeof params !== \"object\" && typeof params !== \"string\") {\n        var error = \"string or object expected, \" + typeof params + \" given.\";\n        return Promise.reject(error);\n      }\n\n      if (typeof params !== \"string\") {\n        params = PaytmChecksum.getStringByParams(params);\n      }\n\n      return PaytmChecksum.generateSignatureByString(params, key);\n    }\n  }, {\n    key: \"verifySignature\",\n    value: function verifySignature(params, key, checksum) {\n      if (typeof params !== \"object\" && typeof params !== \"string\") {\n        var error = \"string or object expected, \" + typeof params + \" given.\";\n        return Promise.reject(error);\n      }\n\n      if (params.hasOwnProperty(\"CHECKSUMHASH\")) {\n        delete params.CHECKSUMHASH;\n      }\n\n      if (typeof params !== \"string\") {\n        params = PaytmChecksum.getStringByParams(params);\n      }\n\n      return PaytmChecksum.verifySignatureByString(params, key, checksum);\n    }\n  }, {\n    key: \"generateSignatureByString\",\n    value: function () {\n      var _generateSignatureByString = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params, key) {\n        var salt;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return PaytmChecksum.generateRandomString(4);\n\n              case 2:\n                salt = _context.sent;\n                return _context.abrupt(\"return\", PaytmChecksum.calculateChecksum(params, key, salt));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function generateSignatureByString(_x, _x2) {\n        return _generateSignatureByString.apply(this, arguments);\n      }\n\n      return generateSignatureByString;\n    }()\n  }, {\n    key: \"verifySignatureByString\",\n    value: function verifySignatureByString(params, key, checksum) {\n      var paytm_hash = PaytmChecksum.decrypt(checksum, key);\n      var salt = paytm_hash.substr(paytm_hash.length - 4);\n      return paytm_hash === PaytmChecksum.calculateHash(params, salt);\n    }\n  }, {\n    key: \"generateRandomString\",\n    value: function generateRandomString(length) {\n      return new Promise(function (resolve, reject) {\n        crypto.randomBytes(length * 3.0 / 4.0, function (err, buf) {\n          if (!err) {\n            var salt = buf.toString(\"base64\");\n            resolve(salt);\n          } else {\n            console.log(\"error occurred in generateRandomString: \" + err);\n            reject(err);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"getStringByParams\",\n    value: function getStringByParams(params) {\n      var data = {};\n      Object.keys(params).sort().forEach(function (key, value) {\n        data[key] = params[key] !== null && params[key].toLowerCase() !== \"null\" ? params[key] : \"\";\n      });\n      return Object.values(data).join('|');\n    }\n  }, {\n    key: \"calculateHash\",\n    value: function calculateHash(params, salt) {\n      var finalString = params + \"|\" + salt;\n      return crypto.createHash('sha256').update(finalString).digest('hex') + salt;\n    }\n  }, {\n    key: \"calculateChecksum\",\n    value: function calculateChecksum(params, key, salt) {\n      var hashString = PaytmChecksum.calculateHash(params, salt);\n      return PaytmChecksum.encrypt(hashString, key);\n    }\n  }]);\n\n  return PaytmChecksum;\n}();\n\nPaytmChecksum.iv = '@@@@&&&&####$$$$';\nmodule.exports = PaytmChecksum;","map":{"version":3,"sources":["/Users/akshaybhopani/GitHub/DCIPL/node_modules/paytmchecksum/PaytmChecksum.js"],"names":["crypto","require","PaytmChecksum","input","key","cipher","createCipheriv","iv","encrypted","update","final","decipher","createDecipheriv","decrypted","e","console","log","params","error","Promise","reject","getStringByParams","generateSignatureByString","checksum","hasOwnProperty","CHECKSUMHASH","verifySignatureByString","generateRandomString","salt","calculateChecksum","paytm_hash","decrypt","substr","length","calculateHash","resolve","randomBytes","err","buf","toString","data","Object","keys","sort","forEach","value","toLowerCase","values","join","finalString","createHash","digest","hashString","encrypt","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar crypto = require('crypto');\n\nclass PaytmChecksum {\n\n\tstatic encrypt(input, key) {\n\t\tvar cipher = crypto.createCipheriv('AES-128-CBC', key, PaytmChecksum.iv);\n\t\tvar encrypted = cipher.update(input, 'binary', 'base64');\n\t\tencrypted += cipher.final('base64');\n\t\treturn encrypted;\n\t}\n\tstatic decrypt(encrypted, key) {\n\t\tvar decipher = crypto.createDecipheriv('AES-128-CBC', key, PaytmChecksum.iv);\n\t\tvar decrypted = decipher.update(encrypted, 'base64', 'binary');\n\t\ttry {\n\t\t\tdecrypted += decipher.final('binary');\n\t\t}\n\t\tcatch (e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t\treturn decrypted;\n\t}\n\tstatic generateSignature(params, key) {\n\t\tif (typeof params !== \"object\" && typeof params !== \"string\") {\n\t\t\tvar error = \"string or object expected, \" + (typeof params) + \" given.\";\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\tif (typeof params !== \"string\"){\n\t\t\tparams = PaytmChecksum.getStringByParams(params);\n\t\t}\n\t\treturn PaytmChecksum.generateSignatureByString(params, key);\n\t}\n\t\n\n\tstatic verifySignature(params, key, checksum) {\n\t\tif (typeof params !== \"object\" && typeof params !== \"string\") {\n\t\t   \tvar error = \"string or object expected, \" + (typeof params) + \" given.\";\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\tif(params.hasOwnProperty(\"CHECKSUMHASH\")){\n\t\t\tdelete params.CHECKSUMHASH\n\t\t}\n\t\tif (typeof params !== \"string\"){\n\t\t\tparams = PaytmChecksum.getStringByParams(params);\n\t\t}\n\t\treturn PaytmChecksum.verifySignatureByString(params, key, checksum);\n\t}\n\n\tstatic async generateSignatureByString(params, key) {\n\t\tvar salt = await PaytmChecksum.generateRandomString(4);\n\t\treturn PaytmChecksum.calculateChecksum(params, key, salt);\n\t}\n\n\tstatic verifySignatureByString(params, key, checksum) {\t\t\n\t\tvar paytm_hash = PaytmChecksum.decrypt(checksum, key);\n\t\tvar salt = paytm_hash.substr(paytm_hash.length - 4);\n\t\treturn (paytm_hash === PaytmChecksum.calculateHash(params, salt));\n\t}\n\n\tstatic generateRandomString(length) {\n\t\treturn new Promise(function (resolve, reject) {\n\t\t\tcrypto.randomBytes((length * 3.0) / 4.0, function (err, buf) {\n\t\t\t\tif (!err) {\n\t\t\t\t\tvar salt = buf.toString(\"base64\");\n\t\t\t\t\tresolve(salt);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tconsole.log(\"error occurred in generateRandomString: \" + err);\n\t\t\t\t\treject(err);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tstatic getStringByParams(params) {\n\t\tvar data = {};\n\t\tObject.keys(params).sort().forEach(function(key,value) {\n\t\t\tdata[key] = (params[key] !== null && params[key].toLowerCase() !== \"null\") ? params[key] : \"\";\n\t\t});\n\t\treturn Object.values(data).join('|');\n\t}\n\n\tstatic calculateHash(params, salt) {\t\t\n\t\tvar finalString = params + \"|\" + salt;\n\t\treturn crypto.createHash('sha256').update(finalString).digest('hex') + salt;\n\t}\n\tstatic calculateChecksum(params, key, salt) {\t\t\n\t\tvar hashString = PaytmChecksum.calculateHash(params, salt);\n\t\treturn PaytmChecksum.encrypt(hashString,key);\n\t}\n}\nPaytmChecksum.iv = '@@@@&&&&####$$$$';\nmodule.exports = PaytmChecksum;"]},"metadata":{},"sourceType":"script"}