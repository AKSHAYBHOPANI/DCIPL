{"version":3,"file":"index.js","sources":["../src/index.js"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Only extends Component {\n\n  static defaultProps = {\n    hiddenMode: \"withNull\",\n    className: \"r-o_hidden\"\n  }\n\n  static propTypes = {\n    /** A single child element */\n    children: PropTypes.element.isRequired,\n\n    /** When true, children will rendered as is  */\n    when: PropTypes.bool.isRequired,\n\n    /** Determines how \"react-only-when\" should hide the child element \n     * \"withNull\": Will not render the child\n     * \"withDisplay\": Will render the child with display:none  \n     * \"withVisibility\": Will render the child with visibility:hidden\n     * \"withCss\": Will render the child with a CSS class (you can pass it a custom className prop)\n    */\n    hiddenMode: PropTypes.oneOf([\n      \"withNull\",\n      \"withDisplay\",\n      \"withVisibility\",\n      \"withCss\"\n    ]),\n    /** This is working in combination with hiddenMode={\"withCss\"}   */\n    className: PropTypes.string\n  }\n\n  render() {\n    const { children, when, hiddenMode, className } = this.props;\n    const singleChild = React.Children.only(children);\n    const { style, ...restOfChildProps } = singleChild.props;\n    const extendedProps = { ...restOfChildProps };\n\n    const keepNode = hiddenMode && hiddenMode !== \"withNull\";\n\n    if (keepNode) {\n      if (hiddenMode === \"withCss\") {\n        extendedProps.className = `${extendedProps.className} ${className}`;\n      } else {\n        extendedProps.style = {\n          ...style,\n          ...(hiddenMode === \"withDisplay\" && { display: \"none\" }),\n          ...(hiddenMode === \"withVisibility\" && { visibility: \"hidden\" })\n        };\n      }\n    }\n    const cloned = React.cloneElement(singleChild, extendedProps);\n    const toHide = keepNode ? cloned : null;\n\n    return when ? singleChild : toHide;\n  }\n}\n\nexport default Only;\n"],"names":["Only","props","children","when","hiddenMode","className","singleChild","React","Children","only","style","restOfChildProps","extendedProps","keepNode","display","visibility","cloned","cloneElement","toHide","Component","defaultProps","propTypes","PropTypes","element","isRequired","bool","oneOf","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA;;;;;;;;;;6BA8BK;mBAC2C,KAAKC,KADhD;UACCC,QADD,UACCA,QADD;UACWC,IADX,UACWA,IADX;UACiBC,UADjB,UACiBA,UADjB;UAC6BC,SAD7B,UAC6BA,SAD7B;;UAEDC,cAAcC,eAAMC,QAAN,CAAeC,IAAf,CAAoBP,QAApB,CAApB;+BACuCI,YAAYL,KAH5C;UAGCS,KAHD,sBAGCA,KAHD;UAGWC,gBAHX;;UAIDC,6BAAqBD,gBAArB,CAAN;;UAEME,WAAWT,cAAcA,eAAe,UAA9C;;UAEIS,QAAJ,EAAc;YACRT,eAAe,SAAnB,EAA8B;wBACdC,SAAd,GAA6BO,cAAcP,SAA3C,SAAwDA,SAAxD;SADF,MAEO;wBACSK,KAAd,gBACKA,KADL,EAEMN,eAAe,aAAf,IAAgC,EAAEU,SAAS,MAAX,EAFtC,EAGMV,eAAe,gBAAf,IAAmC,EAAEW,YAAY,QAAd,EAHzC;;;UAOEC,SAAST,eAAMU,YAAN,CAAmBX,WAAnB,EAAgCM,aAAhC,CAAf;UACMM,SAASL,WAAWG,MAAX,GAAoB,IAAnC;;aAEOb,OAAOG,WAAP,GAAqBY,MAA5B;;;;EApDeC;;AAAbnB,KAEGoB,eAAe;cACR,UADQ;aAET;;AAJTpB,KAOGqB,YAAY;;YAEPC,UAAUC,OAAV,CAAkBC,UAFX;;;QAKXF,UAAUG,IAAV,CAAeD,UALJ;;;;;;;;cAaLF,UAAUI,KAAV,CAAgB,CAC1B,UAD0B,EAE1B,aAF0B,EAG1B,gBAH0B,EAI1B,SAJ0B,CAAhB,CAbK;;aAoBNJ,UAAUK;;;;;"}